import java.time.Duration;
import java.time.Instant;

public class cMatrix {

    private int [][] elements; // Keeps the elements of matrix in two dimensional array
    private int row; // row size
    private int col; // column size

    int maxRange = 10000;
    int count = 0;

    public cMatrix(){
        // Constructor generate matrix of size 10x10
        this.row = 10;
        this.col = 10;
        elements = new int [row][col];
    }

    public cMatrix(int row, int col){
        //Constructor
        this.row = row;         // row and col values will be pulled from Main.java
        this.col = col;
        elements = new int[row][col];

    }
    public void AssignRandom(){
        //Assigning random variables in range 1 - 10000
        for(int i=0; i<row; i++){
            for(int j=0;j<col; j++){
                elements[i][j] = (int)Math.floor(Math.random()*(maxRange-1) + 1);//maxRange-1 => prevent code from generating 10000 
                                                                                 // +1 => prevent code from generating 0
                 // (int)Math.floor => returns the largest (closest to positive infinity) floating-point value that less than or equal to the argument and is equal to a mathematical integer
            }                                                                    
        }

    }
    public void printMatrix(){
        // Printing matrix in matrix form
        for(int i=0; i<row; i++){
            for(int j=0; j<col; j++){
                System.out.print(elements[i][j] + " ");
                count++;
                if(count == col){
                    System.out.println();       // It goes to the bottom row when the count variable is equal to the number of columns.
                    count = 0;
                }
            }
        }
    }
    public void printMatrixWithPrime(){
        //Prints the matrix with “*” sign near the prime elements
        for(int i=0; i<row; i++){
            for(int j=0; j<col; j++){
                if(elements[i][j]%2 == 1){                     // to find odd numbers
                    System.out.print(elements[i][j] + "* ");
                }else{
                    System.out.print(elements[i][j] + " ");
                }
                count++;
                if(count == col){
                    System.out.println();
                    count = 0;
                }
            }
        }
    }
    public cMatrix multiplyMatrices(cMatrix Multiplicand){
        // Multiply two matrices and informs the user about time lapse

        Instant startTime = Instant.now();
        cMatrix result = new cMatrix(row, Multiplicand.col);// create the result matrix's dimension. It's like a 3x6 matrix is formed by multiplying a 3x2 matrix and a 2x6 matrix.

        int i,j,k = 0;

        for(i=0; i<row; i++){
            for(j=0; j<Multiplicand.col; j++){
                for (k=0; k < Multiplicand.row; k++){
                    result.elements[i][j] += elements[i][k] * Multiplicand.elements[k][j]; // the code doing matrix multiplication in this line
               // for example first element of 0th row  
                }
            }
        }

        Instant endTime = Instant.now();
        Duration elapsedTime = Duration.between(startTime, endTime);                // calculates the process duration in miliseconds
        String message = String.format("The duration of multiplication of matrices: %dx%d * %dx%d is %d miliseconds"
                ,row,col,Multiplicand.row,Multiplicand.col, elapsedTime.toMillis());
        System.out.println(message);
        return result;
    }

}
